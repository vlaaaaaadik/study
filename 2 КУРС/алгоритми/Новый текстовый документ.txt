                                   деревовидні структури даних
1.означення дерева
2.класифікація дерев
3.двійкові дерева пошуку
4. операції із деревами
4.1 додавання вузла в дерево
4.2 обхід дерева
4.3 пошук вузла в дереві
4.4 знищення вузла з дерева
4.5 знищення всіх вузлів дерева
4.6 підрахунок вузлів
4.7 визначення висоти дерева
5. збалансовані дерева
1)існує декілька визначень дерев як структур даних
Дерео - це граф що не мітить циклів
Дерево - це ліс що складається з одного звязного компонету
Деревовидна структура даних - це динамічна звязна структура, яка відрізняється від списку тим, що звязки не є лінійними, а розгалуженими
Всі дерева можна розділити на дві групи, які відрізняються один від однго способом побудови і реалізацією функцій обробки - дерева і піраміди(куча).
Дерево - це рекурсивна орієнтована структура даних.
Дерево - це не орієнтована структура і двонаправлена.
2)серед структур даних, які відрізняються к-стю гілок які відходять від кожного вузла дерева дерева можуть бути:
1.двійковими(бінарними) - дерева що мають не більше двох гілок
2. дерева з кількістю гілок більше ніж 2 (сильнорозгалужені або багатоваріантні)
Важливою ознакою є стан збалансованості дерева і способи його досягнення
в залежності від цього дерева поділяють на :
1. Збалансовані (АВЛ-дерева Червоно-чорні і Б-дерева)
2. Ідеально збалансовані 
3. Вироджені
за способом застосування дерева поділяють на:
Дерева пошуку та сортування а також окремі типи дерев для розвязування спеціальних задач наприклад для пошуку даних на основі їх порозрядного двійкового представлення
3) Дерево - це динамічна нелінійна структура даних, кожний елемент якої містить інформацію або адресу на місце в памяті де зберігається інформація і вказівники на інші такі елементи(вказівників не менше 2)
Для двійкових дерев їх 2 на правий і лівий сусідніх елементів.
Піраміда(куча) - це деревовидна структура даних, в якій значення всіх вузлів розташованих на одному рівні є більшими або меншими від значення вузлів розташованих на вищому рівні
Дерево - Деревовидна структура даних в якій значення всіх вузлів, що розміщені правіше від деякого вузла більше за значення всіх вузлів які розташовані лівіше це визначення виконується як для цілого дерева так і для кожної його частини.
Основна відмінність між деревом і списком є та, що у списку є сусідніми є попередній і наступний елемент а у двійкового дерева пошуку сусідніми є елементи з меншим і більшим ключами.
Отже враховуючи, що кожна частинка дерева є також деревом робимо висновок що дерево- це рекурсивна структура даних і тому операції з нею краще використовувати як рекурсивні функції.
Як оголосити:
struct note
{
     int key;
     float data;
     note *right, *left;
};
int main()
{
    note *p;
}
областы застосування дерев:
1. Для зберігання інформації 2. для опису зберігання даних на диск 3. у функціях пошуку та сортування 4. при побудові ефективних кодів для стискати інформацію
4) Для дерев використовуються ті ж оснвні операції що і для списків.
Додаткові операії це збалансування дерева, підрахунок к-сті вузлів у дереві, вимірювання висоти дерева, пошуку найблищого спільного кореня для двох елементів
4.1)Нехай послідовно вводяться записи із такими ключами 70 60 85 87 90 45 30 88 35 20 86 82 побудувати двійкове дерево пошуку:

1. поняття про структуру даних. класифікація структур даних за ознакою змінності
2. класифікація структур даних за ознакою розміщення і доступу до низ
3. властивості алгоритмів 
4. способи представлення алгоритмів
5. основи аналізу алогоритмів за розміром вхідних даних 
6. одиниці вимірювання часу алгоритмів
7. порядок росту складності алгоритмів
8. ефективність алгоритму в різних випадках
9. асимптотичні позначення
10. основні класи ефективності
11. математичний аналіз рекурсивних та нерекурсивних алгоритмів
12. визначення методу грубої сили
13. сортування вибором та бульбашкове сортування
14. послідовний пошук та пошук підрядків
15. задачі пошуку пари найблищих точок і обчислення опуклої оболонки з використанням грубої сило
16. Сортування злиттям та швидке сортування
17. бінарний пошук
18. обхід бінарного дерева
19. множення великих цілих чисел
20. множення матриць штрассена
21. масиви та матриці: означення оголошення звернення до елементів способи утворення
22. структури : означення оголошення звернення до елементів способи утворення
23. зв'язні списки : означення види списків оголошення звернення до елементів способи утворення
24. операції над списками : утворення нового вузла додавання вузла у початок середину та кінець списку вилучення вузла пошук елемента у списку
25. поняття про деревовидну структуру даних
26. класифікація дерев
27. означення лерева та піраміди та їх відмінність (куча)
28. оголошення дерев звернення до елементів операціїї додавання вузла пошук вузла способи обходу вилучення вузла вилучення всіх вузлів
29. збалансовані дерева пошуку
30. пірамідальне сортування 
31. хешування 
32. алгоритмічні стратегії
33. поняття про графи
34. алгоритми над графами
35. представлення графів у програмі
 д з червоно-чорні дерева означення властивості особливості побудови застосування

В інформатиці червоно-чорні дерева застосовуються для формування порівнянних даних, до яких можуть відноситися різноманітні витримки і частини написів або цифр.

хешування