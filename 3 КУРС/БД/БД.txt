до 17 числа вибрати тему курсової
апаратне вирішення зберігання інформації приклади
                                ОСНОВНІ ПОНЯТТЯ БАЗ ДАНИХ 3.09
1.основні поняття баз даних
1.1. дані та знання
сучасне суспільство визначають як "інформаційне". тому виникають такі поняття як дані інформація і знання.
Дані - (data - факт) 
інформація - розяснення повідомлення.
дані це сукупність фіксованих відомостей про події та явища зафіксованих на певному носії. Дані придатні для постійного зберігання
передачі, обробки. Перетворення та обробка даних дозволяє отримати інформацію.
Дані з точки зору іформаційних систем це інформація яку необхідно зберегти в комп.ютері і до якої регулярно звертаються для одержання
відомостей (запити), для оновлення видалення і додавання нової інформації.
Дані мають свої властивості (характеристики) ,поведінку і звязки між цими обєктами.
Дані баз даних поділяються :
-алфавітно-цифрові
-графічні образи
-мультимедійні , гіпертекстові, гіпермедійні
-картографічні просторові (в геоінформаційних систем)
-ряди даних (використовуються в багатовимірних базах даних)
Інформація це результат перетворення даних. Вона зявляється в результаті обробки даних при вирішенні конкретних задач
(січення 1.5 мідний провід
напруга 220 в
чи можемо ми підєднати прилад потужністю 5 кіловат)
Знання це вид інформації що відображає знання фахівця в конкретній предметній галузі/інтелектуальний капітал
Знання можуть бути у вигляді документів (нормативи, стандарти що регламентують прийняття рішення, підручників, інструкцій).
Неформальні знання це досвід фахівців в певній галузі.
В інформаційних системах прийняття рішеннь на основі отриманої інформації і наявних знаннь здійснюється аналіз та вибір 
найкращого розвязку з множини допустимих варіантів вирішення. малюнок взаємозв'язок даних інформації та знань.
                                Бази даних та Бази Знаннь
дані та знання в інформаційних системах зберігаються в сховищах які називаються БАЗАМИ.
Бази знаннь knowledge base це сховище розроблене для управління знаннями (метаданими) а саме збором зберіганням пошуком і 
видачею знань. Розділ штучного інтелекту що вивчає бази знаннь і методи роботи з знаннями називається інженерією знаннь.
   Класифікація баз знань:
1. бази знань всесвітнього масштабу ( інтернет, вікіпедія )
2. бази знань національного масштабу (вікіпедія)
3. база знань галузева
4. база знань організації
5. база знань експортних систем
6. бази знань спеціалістів ( база знань інженера програміста)
                                         Бази Даних Database
база даних - це сукупність спеціальним чином організованих даних і обєктів які відображають предметну область і призначені для
спільного використання.
предметна область (ПО) - це частина реального світу що підлягає вивченню для організації управління і в кінцевому рахунку для 
автоматизації.
для створення бази даних найчастіше вистачає засобів системи керування базою даних (СКБД СУБД). 
СУБД це спеціалізовані програми або комплекс програм призначений для організації баз даних
			10.09Класифікація СУБД за типом керування :
1. ієрархічні 
2. мережеві
3. реляційні
4. обєктно-реляційні
5. обєктно-оріентовані
6. багаторівневі
7. гібридні
за організацією зберігання СУБД поділяються на локальні та розподілені.
за способом доступу :
1. файл-серверні
2. клієнт-серверні
3. вбудовані
у файл-серверних СУБД дані розміщуються централізовано на сервері. ядро СУБД розміщується у кожному компютері клієнта користувача.
доступ до даних здійснюється через локальну мережу. синхронізація читання оновлення даних бази даних здійснюється засобами файлових блокіровок.
переваги :
низьке навантаження на центральний процесор сервера
недолік:
високе навантаження локальної мережі
приклади :microsoft acces 
клієнт-серверні СУБД складабться з клієнтської частини яка входить в склад прикладної програми та сервера.
вони забезпечують розмежування доступу між користувачами і мало навантажують мережу та компютери клієнтів
сервер є зовнішньою по відношенню до клієнта програмою і за необхідності його можна замінити іншим
недолік:
факт існування сервера. 
великі обчислювальні ресурси які споживаються сервером.
приклади це : mySQL microsoft SQL oracle postgree SQL 
вбудовані СУБД це бібліотека яка дозволяє уніфікованим чином зберігати великі дані на локальній машині. доступ до даних здійснюється через SQL
або через особливі функції СУБД.
вони більш швидкодіючі за клієнт-серверні і не вимагають встановлення сервера тому вони використовуються в локальному режимі коли потрібно обробляти
величезні обєми даних наприклад геоінформаційні системи
приклади: SQLITE Open Edge mySQL ms SQL server compact.
 основні функції СУБД
керування даними зовнішньої памяті
керування даними в оперативній памяті
журналізація змін, резервне копіювання та відновлення БД після збою
підтримка мов бази даних ( мова потрібна для маніпуляції даними)
	компоненти СУБД
1.ядро що відповідає за управління даними в зовнішній та оперативній памяті та за журналізацію
2.процесор мови бази даних що забезпечує оптимізацію запитів вилучення зміну та створення даних відповідає за машинно-незалежний виконуваний внутрішній код
3.підсистема підтримки часу виконання що інтерпретує програми маніпуляції даними що створюють користувацький інтерфейс
4.сервісні програми (зовнішні утиліти) забезпечують ряд додаткових можливостей для обслуговування інформаційної системи 
база даних складається з двох компонентів : структури та дані
під структурою ми розуміємо спосіб представлення даних 
приклад структурованих даних це таблиця а неструктуровані дані це текстові файли.
на концептуальному рівні структура бази даних представляється у вигляді ER-діаграми (Entity-relation)
діаграма є ієрархічною або мережевою реляційною або обєктно-реляційною ітд.
на фізичному рівні база даних це структура файлів даних і допоміжних файлів
самі файли складаються з структури та даних
коли необхідно забезпечити зручність роботи з БД некваліфікованим користувачам або коли невлаштовує інтерфейс СУБД то в такому випадку необхідно розробляти додаток користувача
 Етапи проектування бази даних 
написання будь-якої програми або проектування БД починається з детального вивчення предметної області і називається концептуальним проектуванням
1. концептуальне проектування це збір аналіз редагування вимог до даних. після закінчення даного етапу отримаємо концептуальну модель тотожну до структури бази даних.
2. логічне - перетворення вимог до даних у структури даних. на виході отримаємо СУБД-оріентовану базу структуру бази даних і специфікації прикладних програм
на цьому етапі моделюють бази даних стосовно різних СУБД і проводять порівняльний аналіз
3. фізичне проектування - це визначення особливостей зберігання даних методів доступу до даних. закінчується цей етап фізичною реалізацією бази даних та
наповнення її первинними даними.
концептуальне проектування бази даних полягає в розумінні того які дані повинні бути взяті з предметної області. результатом цього етапу є побудова концептуальної
моделі - тобто подання предметної області у вигляді інформаційних обєктів і звязків з одним або декількома відношеннями.
Здійснюється концептуальне проектування методом сутність - звязок. на цьому етапі будемо використовувати наступні поняття
сутність - це обєкт предметної області що є множиною елементів. це реальний або уявний обєкт інформація про який повинна зберігатися в базі даних і бути доступною в будьякий момент для користувача
наприклад студент, викладач це обєкт або сутність а прізвища це елементи або екземпляри сутності. сутності звязані між собою звязками
звязок - це графічно відображена асоціація що встановлюється між двома різними сутностями або сутність сама з собою. 
Будь-якому звязку виділяють два кінці. звязо повинен мати імя ступінь і обовязковість. 
ступінь звязку визначає яка к-сть екземплярів одної сутності може бути звязана з екземплярами іншої що входить в цей звязок
ступені звязку бувають M це багато і 1.
можуть бути наступні звязки 
1:М
М:1
М:М
1:1
крім ступеня звязку визначаємо його обовязковість тобто чи є обовязковою участь цих екземплярів сутності у звязку
якщо звязок обовязковий то його ступінь подають у прямокутнику а необовязкові у вигляді крапки.
кожен обєкт або сутність має свої атрибути (властивості) які повинні бути відображеними на діаграмі.
кожен обєкт характеризується поведінкою що вказує які дії і коли можна виконати з даним обєктом.
прямокутник - сутність(в нього вписується імя сутності а не екземпляр)
еліпс - атрибут
ромбік - звязок
Логічне проектування баз даних. ER - модель перетворюється на логічну модель. Логічгі моделі бувають реляційні ієрархічні мережні
реляційна модель це така модель яка містить структуровані дані. дані в таких реляційних моделях подаються відношеннями (таблицями)
	для перетворення концептуальної в логічну використовують наступні правила :
1. кожна сутність подається у вигляді таблиці найменування сутності це назва таблиці
2. кожен атрибут сутності це назва ствопця таблиці (поле)
3. сукупність полів утворюють структуру таблиці. Кожен екземпляр сутності це рядок (запис,кортеж) таблиці якщо у відношенні для сутності не повинно бути 
повторюваних записів то в будь-якому відношенні (таблиці) обовязково має бути поле що забезпечує унікальність (неповторюваність) кожного запису.
таке поле називають полем первинного ключа primary key.
підчас перетворення таблиць які відображають звязки необхідно враховувати властивості звязку а саме ступінь і обовязковість
1. якщо ступінь звязку 1:1 то участь обох сутностей є обовязковою. Всі записи обох таблиць обєднані одним звязком то необхідно створити одну таблицю
в яку війдуть всі атрибути обох сутностей.
2. якщо ступінь 1:М і участь сутності з М є обовязковою тоді необхідно створити дві таблиці. сутність з ступенем 1 перетворюється в самостійну таблицю і М також
3. якщо ступінь звязку М:М то необхідно створити три таблиці . вихідні сутності перетворюються в самостійні відношення крім того. первинний ключ позначається *
вторинний **foreighn key FK це допоміжні поля для звязку між таблицями 
в первинному ключі не може бути NULL а в унікальному може бути NULL
						приклад бази даних бібліотека. 12.09
предметна область містить інформацію про всі книжки у бібліотеці (назва,автор,видання,видавництво, к-сть примірників і тд) та про всіх абонентів бібліотеки
1 читач може замовити багато книжок а з другої сторони одну книгу можуть замовити багато читачів є декілька примірників тому між сутностями є звязок М:М
дивитись приклад бази даних бібліотеки.
підчас переходу від сутностей до таблиць звязок вимагає створення нової таблиці куди увійдуть поля первинних ключів обох сутностей і крім того додаткових
атрибутів що затверджує факт отримання книжки. 
На основі ER-діаграми та поданих правил розроблено таблиці такої структури:
див 2 частину приклад бази даних бібліотеки.
			Проектування баз даних з використанням нормалізації
будемо вважати що предметну область представлено однією або кількома таблицями і на кожному кроці проектування є певний набір відношеннь
який має кращі властивості ніж попередній 
процес проектування - це процес нормалізації схем відношеннь при чому кожна наступна нормальна форма має кращі властивості ніж попередня
Кожній нормальній формі відповідає певний набір обмеженнь. 
Відношення є в нормальній формі якщо воно задовільняє властивий їй набір обмеженнь.
В теорії реляційних баз даних вважається що початковий набір є першою нормальною формою.
Виділяють таку послідовність нормальних форм :
див нормальні форми
			фізична реалізація файл-серверної бази даних
Вибр СУБД. 
Є багато платних та безкоштовних СУБД
можна виділити кілька видів СУБД за розміром таблиць:
Персональні(офісні) - порядка 1000 записів
середні - порядка 100к записів 
великі - 1м записів
1. персональні СУБД. 
Їх структура достатньо проста і не потребує створення ПЗ. Потрібен лише пошук і можливість роздруку результатів.
Якщо дані зручно представити у вигляді однієї таблиці то СУБД не потрібне а потрібен табличний процес наприклад EXEL.
Якщо дані зручно представити у вигляді кількох таблиць тоді потрібен СУБД наприклад аксес
2. СУБД для потреб середнього підприємства.
Розбивають дані на кілька довідкових таблиць і на кілька робочих.
Потрібна програмна обробка даних перед внесенням в БД і показом користувачу.
З БД працюють декілька користувачів. В СУБД зберігаються дані а УІ пишеться на довільній мові наприклад ЕКСЕЛЬ майкрософт SQL сервер
3.СУБД великого підприємства.
4. СУБД для веб-сайту. 
Якщо на сайт заходять 1000 користувачів на добу і в базу даних записується 1 рядок про відкритття сторінки то через 100 днів вже буде 100к записів тому треба 
великі СУБД mySQL+PHP.
Всі сучасні СУБД мають візуальний інтерфейс у вигляді вбудованої або окремої програми
									21.09
front-end i back-end
back-end - там де зберігаються дані 
front-end - призначений для взаэмодії з даними.
Цей підхід дуже розумний. він відділяє шар даних від інтерфейсу користувача тому одні займаються front-end а інші back-end.
программа яка дозволяє управляти БД називається workbench sun system мультиплатформенна.
Переваги:
-МОжливість представити модель БД в графічному виді та редагування даних в таблиці
-Наявність простого та функціонального механізму по створенню звязків між полями таблиці 
-Є функція по відновленню структури таблиці і звязків яка була реалізована раніше (reverce ingeneering)
-Наявність редактора SQL-запитів надає можливість відправляти та отримувати запити в табличному вигляді.
Navicat.
PHPMyAdmin.
це веб інтерфейс за допомогою якого можна адмініструвати сервер MySQL через браузер.
переваги:
-можливість управляти MySQL без безпосереднього введення MySQL команд.
-Панель управління дає можливість адмініструвати виділеними базами даних
-Інтенсивний розвиток
-Можливість інтегрувати її в власні розробки.
DBforge studio for MySQL
headySQL
SQL maestro
EMSSQLmanager
SQL yok
DBtools manager
MyDBstudio
мова SQL
база даних - це структурований набір даних
в реляційній базі інфа зберігається в вигляді 2-мірних таблиць рядки це записи стовпці це поля
Див приклад БД.png
таблиця без первинного ключа не використовується. якщо нема первинного ключа то записи не унікальні і можна заплутатись
якщо є первинний ключ є то запис унікальний і він має свій ідентифікаційний ключ.
Для звязку кількох таблиць використовується зовнішній ключ foreighn key 
Первинні ключі на які посилаються зовнішні ключі назив батьківськими.
якщо в таблиці є поля значення яких посилається на первинний ключ іншої таблиці назив зовнішніми ключами.
SQL - structure query language - мова програмування для взаэмодії користувачів з БД застосовується для формування запитів, оновлення,
керування БД, створення схем БД, модифікації, створення систем контролю за доступом до БД.
Для кожної конкретної СУБД існують діалекти
	види SQL 
-інтерактивний скуль використовується безпосередньо для роботи в БД
-статичний скуль 
-динамічний скуль
	Розділи SQL
1.DDL - data definision language робота з структурою бази - оператори для створення
2.DML - data manioulation language робота з записами
3.DCL - data control language - робота з правами користувачів
4.TCL - transaction control language - робота з транзакціями
До DDL відносяться такі команди create, alter - змінити , drop - видалити.
до DML - select, insert, update, delete
до DCL - grant, deny, revoce - скасувати раныше надані права,
до TCL - begin transaction, save point - точка збереження , roll back - відкат,
оператори = > < != between like is is not...
типи даних 
BLOB - Великий обєм інформації
CHAR - рядок символів від 0 до 32767 байт
DATE - розмір 32 біти для збереження дати
DECIMAL - від 16 до 64  
DOUBLE - число з плаваючою крапкою розмір 64 біти
FLOAT -  число з плаваючою крапкою подвійної точності скл з 7 цифр
INT - ціле зі знаком 32 біти
NUMERIC - = децімал але економніше
SMALLINT - ціле зі знаком 16 біти
TIME - час
TIMESTAMP - дата і час 64 біти
VARCHAR - рядок змінної довжини
Мова SQL це мова структурованих запитів що дозволяє формувати складні запити до БД
Запит це запитання до БД що повертає запис або множину записів у відповідь на задане питання 
Використання запитів має такі переваги :
1. Можливість обєднання таблиць звязками які не передбачені підчас проектування БД
2. Мождивість поєднувати в одному вивідному наборі не тільки значення з різних таблиць а і з різних баз даних
3. Додавати фільтри будь-якого рівня складності
4. здійснювати багаторівневе сортування створення обчислювальні та підсумкові поля.
Основні вимоги SQL
1. Стандарт вимагає щоб всі ключові слова були написані великими літерами (система автоматично робить переведення до верхнього регістру)
2. всі коментарі починаються та закінчуються /* */
3. Константи дати та часу беруться в подвійні лапки і мають формат 
4. логічні константи = true i false або t i f.
					робота з доменами
для опису полів БД які мають однакові значення використовується домен.
Домен це глобальний в межах даної бази визначення поля яке може використовуватись в операторах створення та модифікації таблиць 
DOMEIN - тип даних визначений користуваче
індекси це обєкт БД який забезпечує прямий та швидкий доступ до полів таблиці.
При використанні індексів зменшується кількість операцій обміну з зовнішньою памятю
індекси можна створити автоматично при створенні первинного ключа і унікального ключає
і вручну за допомогою команди CREATE INDEX p1 ON t1(p1);
кожен індекс складається з значень полів та вказівників організованих у виді сторінок.
при виконанні запиту здійснюється пошук в цих таблицях.
Коли раціонально створювати індекси?
1. Поле часто використовується у WHERE
2. Коли поле маэ широкий діапазон значеннь
3. Коли поле має невизначені значення 
4. Коли таблиця великого розміру а буде використовуватись 15 % записів.
при введені даних продуктивність зменшується
якшо треба по спаданню CREATE INDEX p1 ON t1(p1 DESC);
унікальний ключ CREATE UNIQUE INDEX p1 ON t1(p1);
									нормалізовані таблиці
нормалізована таблиця це та таблиця яка притримується наступних правил 
1. атомарність даних
2. первинний ключ
правила атомарності:
1. стовбець не може складатися з кількох однотипних елементів
2. таблиця не може складатися з кількох однотипних стовбців - щоб вийти з цієї ситуації використовуються зовнішні ключі
		створення первинного ключа
CREATE TABLE t1
(id INT AUTO_INCREMENT, name VARCHAR(30) NOT NULL, price INT, PRIMARY KEY(id));
								структура таблиці alter table
ALTER TABLE t1 дія 
ADD COLUMN поле тип атр позиція
PRIMARY KEY поле
DROP COLUMN поле
RENAME TO значення 
CHANGE COLUMN старе нове тип атр
MODIFY COLUMN поле тип
								SQL функції
це блок дій з назвою виконує дії і повертає значення.
RIGHT/LEFT (поле кількість символів ) - повертає символи зліва або зправа
SUBSTRING_INDEX (поле, розділювач,номер(-1 справа 1 зліва))
UPPER LOWER(поле) - верхній нижній регістр
RTRIM/LTRIM(поле) - забирає пробіли
CASE ELSE AND

UPDATE t1 
SET rank = CASE
WHEN rep>=500 and rep <= 800 THEN 'mayor'
ELSE 'NO'
END;
				вивід в прямому і зворотньому порядку
ORDER BY
DESC
LIMIT
				вивід неповторюваних записів 
SELECT DISTINCT
* FROM t1	
				вивід групи записів
SELECT * FROM t1 GROUP BY ПОЛЕ
										SQL функції для роботи з числами
SUM(поле)
MIN/MAX(поле)
COUNT(поле)
AVG(поле)
										запит в запиті підзапит
										
										створення зовнішнього ключа 
										
										комбінований ключ це ключ який складається з двох полів
приклад:
										sql зєднання і вивід результатів з кількох таблиць
1. внутрішнє зєднання INNER JOIN
2. перехрестне зєднання CROSS JOIN
3. натуральне зєднання natural join
4 зовнішнє зєднання left/right join
НЕДОЛІКИ внутрішнього зєднання якщо поле = нул то воно не буде відображатись на екрані
цього недоліку немає при зовнішніх зєднаннях 
										View представлення
представлення це логічний образ таблиці створений на основі реальної таблиці або другого представлення це "вікно" через яке можна переглядати дані або змінювати їх
CREATE VIEW WWW AS SELECT p1,p2,p3 FROM t1 WHERE умова ;
SELECT * FORM WWW


										1 побудова Концептуальна модель, фізична реалізація конкретної моделі.
										2 практична робота реалызація запитів 
на вибірку на створення таблиці на оновлення на добавлення на видалення з параметрами
										транзакції
це набір команд які виконуються як єдине ціле.
В транзакції або всі команди будуть виконані або жодна з них не виконається.
Якщо хочаб одна з команд транзакції не може бути виконана тоді БД буде повернено в стан який вона мала до початку транзакції.
Деколи під транзакцією розуміють не групу SQL команд або операторів а інтервал часу необхідний для виконання цієї групи команд як єдиної команди.
Транзакції мають властивості, які називаються ACID Atomicity Consistency(узгодженість) Isolation Durability(довговічність).
Для вирішення проблеми одночасного доступу розроблено стандарт яикй визначає 4 рівні ізоляції транзакцій і відповідно рівні надійності роботи з даними.
рівень 0 - читання непідтверджених даних забруднених даних dirty read.
рівень 1 - читання непідтверджених даних read commited
рівень 2 - повторювальне зчитування repeatable read snapshot
рівень 3 - serial izabel заборона фантомів.
підвищення ізольованості призводить до зниження швидкості виконання паралельних транзакцій.
Транзакція включає кілька операцій з базою даних. користувач повинен мати можливість вказати системі що окремі операції являються частиною однієї транзакції.
BEGIN TRANSACTION;
UPDATE account A;
UPDATE account B;
IF OK THEN COMMIT; // ФІКСАЦІЯ 
ELSE ROLLBACK //АВАРІЙНИЙ ВІДКАТ
END IF

SET AUTOCOMMIT = 0;